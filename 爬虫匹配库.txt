

re正则表达式
====================================================================
re.match(a,b)：.group()得到结果
1、a：要查找的 单个 字符串，b：匹配的文本
2、匹配不到会报错，，返回None
3、从第一个开始匹配，b第一个字符匹配不到就报错

.（单个点，匹配任意字符)	[.]或\. 表示真实的'.'	
			没有办法匹配换行符等转义字符（匹配不到会报错）****


\d：	\d和\D互为补集（匹配不到会报错）数字

\s：	空白（包括有空白含义的转义字符）（匹配不到会报错）

\w:	\w和\W互为补集（匹配不到会报错）java标识符首字母	


[]: 匹配【】内某一个（匹配不到会报错）


*：	允许第一个匹配不到直接返回空（不会报错）
	一直匹配下去，直到该单字符不满足条件为止，顺序返回匹配到的所有字符

+:	第一个就要匹配到
	一直匹配下去，直到该单字符不满足条件为止，顺序返回匹配到的所有字符

？:	允许第一个匹配不到直接返回空（不会报错） 非贪婪匹配
	最多只能匹配一个（是就是，不是就不是,反正没有下一个）


^	放在[]内，表示取反	放在[]外，表示指定字符开始

$	以。。。结尾	例：[\w]+@[0-9a-z]+[.]com$

[|]	表示出现一个就输出（单个字符）	例：[http|https|ftp|file]+
(|)	表示不同的字符串	从左到右匹配到1个就输出，后面的不管


{m}:m为数字	m个
{m,n}单位：次:		m次-n次	都能匹配到的情况下，默认匹配n次，（尽力匹配n次）
			匹配不到就把匹配到的返回，（至少匹配m次，保底达不到就报错)
==================================================
等价表达式
\d == [0-9]		\D == [^0-9]
\w==[0-9a-zA-Z_]		\W==[^0-9a-zA-Z]
==================================================
re.match(str, text)：	开头不满足即失效	.group()得到结果
re.search(str, text)：	找到第一个匹配位置	.group()得到结果
re.findall(str,text)：	返回结果为列表
re.sub(str1,str2,text):str2替换str1
re.split('',text)	返回列表
r = re.complie(r"""
	        \s	#邮箱前面的空格
	       (\w+	#邮箱的第一部分
	       @
	       [0-9a-z]+#邮箱的第二部分
	       \.com)
	       """,
	       re.VERBOSE	#忽略在正则表达式中因注释产生的换行符
	)
保存到r中，使用示例：result = re.findall(r.text)


==================================================
贪婪模式（默认，尽可能多的匹配，直到不满足条件为止）（以文本最后一个目标字符作为结尾）
非贪婪模式（尽可能少的匹配，<=1）	'?'	第一个结尾	(.*?)
==================================================
在正则中有特殊含义的字符，如果在匹配内容中需要用到原含义，需通过'\'转义	.*+？$^

group函数，小括号表示提取的内容，group(n)函数参数n表示第几个小括号的内容
====================================================================
====================================================================



xpath提取
































